# Multi-stage build for MCP Server deployment
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files for dependency caching
COPY package*.json ./
COPY tsconfig.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci && npm cache clean --force

# Copy source code
COPY src ./src

# Build TypeScript
RUN npm run build

# Production stage for MCP Server
FROM node:18-alpine AS production

# Install system dependencies for Playwright and utilities
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    bash \
    curl

# Tell Playwright to use installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S ocean -u 1001 -G nodejs

WORKDIR /app

# Copy built application and package files
COPY --from=builder --chown=ocean:nodejs /app/dist ./dist
COPY --from=builder --chown=ocean:nodejs /app/package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/screenshots /app/downloads && \
    chown -R ocean:nodejs /app

# Make MCP server executable
RUN chmod +x ./dist/mcp-server.js

# Switch to non-root user for security
USER ocean

# Health check for MCP server
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD echo '{"method":"tools/list","jsonrpc":"2.0","id":1}' | node dist/mcp-server.js | grep -q "scrape_page" || exit 1

# MCP servers typically run on stdio, no port exposure needed
# EXPOSE is not used as MCP uses stdin/stdout communication

# Entry point for MCP server
ENTRYPOINT ["node", "dist/mcp-server.js"]